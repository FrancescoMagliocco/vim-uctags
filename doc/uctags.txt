*vim-uctags* A |plugin| to highlight tags generated by Universal-Ctags
*vim-uctags*
CONTENTS:                                                     *uctags-contents*
    1. Requirements                                       |uctags-requirements|
    2. Configuration                                  |uctags-global-variables|
===============================================================================
1. Requirements:                                          *uctags-requirements*
|vim-uctags| requires Vim to be at least version 8.1 and Universal-Ctags to be
installed.  It may be available through your distributors package manager.  If
not go to https://github.com/universal-ctags/ctags and follow the instructions
on how to install it.
===============================================================================
2. Configuration:                                     *uctags-global-variables*
If you would like to fine tune |vim-uctags| to your liking, below is a list of
options you can configure.  If you would like more customization, please feel
free to request so.

There is no point in cluttering your |.vimrc| with every option listed below.
The larger your |.vimrc| is, the longer (Not noticeable) it will take Vim to
start up.  With that being said, ONLY place an option in your |.vimrc| if
you're not happy with the default value.

If you want to change an option, you can do so like this:  >

    let g:enable_uctags = 0
<
    Note: Yes the |let| command is needed.

*g:uctags_enabled*         (Default: 1)
    Enables or disable |vim-uctags|

*g:uctags_executable*      (Default: "ctags-universal")
    File name of the ctags-universal executable.  The default is usually
    accurate.

*g:uctags_tags_file*       (Default: "tags")
    File name to be used for when saving the generated |tags|.

*g:uctags_max_info*        (Default: 1)
    Whether or not to generate as much info as possible for |tags|.  This will
    generate a much larger |tags| file.  Setting this is equivalent to the
    following:  >

        ctags-universal -R --fields=* --all-kinds=*
<
    Note: It is not recommended to use the `--extras=*` switch, as it will
    result in inaccurate highlighting.
    
    Entires that of |g:uctags_extra_args| can override this option.

    Example:~  If you have the following in your |.vimrc| >
        
        let g:uctags_extra_args['--fields='] = 'fks'
<
    Even if |g:uctags_max_info| is set, the outcome will be equivalent to the
    following:  >

        ctags-universal -R --all-kinds=*
>

*g:uctags_args*            (Default:  >
        function! s:ParseArgs(args)
          return extend(extend(a:args, g:uctags_max_info
                \   ? {
                \       '--fields=': '*',
                \       '--all-kinds=': '*'
                \     }
                \   : {} ), g:uctags_extra_args)
        endfunction

        " This will define the default arguments.
        let g:uctags_args          = get(
              \ g:,
              \ 'uctags_args',
              \ {
              \   '-R': '',
              \   '-f': g:uctags_tags_file
              \ })

        " Extends g:uctags_args with g:uctags_extra_args so
        " g:uctags_args can be used when needing arguments for
        " ctags-universal.  See s:ParseArgs() body for additional details.
        let g:uctags_args          = s:ParseArgs(g:uctags_args)
<)
    The above code is what is used to determine the default setting for
    |g:uctags_args|.

    See |g:uctags_extra_arqgs| for an example on how to set
    |g:uctags_extra_args|.  The principle is the same.

    Note: It is not recommended to change this.  If you don't like the
    default, just change them to your liking with
    |g:uctags_extra_args|.

*g:uctags_extra_args*      (Default: {})
    A |Dictionary| of extra arguments that will be |extend|ed to
    |g:uctags_args|.  |g:uctags_extra_args| has the highest
    precedence.

*g:uctags_hl_group_map*    (Default: >
          \ {
          \   'function'  : 'Func',
          \   'variable'  : 'Var',
          \ }
<)
    A |Dictionary| of {key}:{val} where {key} is a {kind} provided by uctags,
    and {val} represents said {key} i.e {kind} but truncated for convenience;
    hence "function" being mapped to "Func" as shown in the default. 

    Each {val} will be prefixed with {lang} i.e language, which is determined
    in the |tags| file (See |g:uctags_tags_file|) for the |tag|
    corresponding to the {kind} depicted by {key}, mapped to {val}.  The end
    result is a |group-name| to be used when highlighting said |tag|; thus a
    |group-name| format of {lang}{Kind}.

    See |g:uctags_lang_map| for customizing the mapping of each
    language.

    Generally {val} i.e {kind} should start with an uppercase.

    With the default shown above, instead of the {kind} "function" being
    highlighted as |group-name| {lang}function ({lang} being the corresponding
    language for a given |tag|), {lang}function will be highlighted as
    {lang}Func.

    If you would like to change one of the defaults, or add one of your own
    and change some of the other {kind}s, you could do so like this:  >

        let g:uctags_hl_group_map['function'] = 'CustomFunc'
<
    With that, if the language of the |tag| for {kind} was C, all functions
    would be highlighted as the |group-name| "cCustomFunc".  Without the
    change, and just using the default, "cCustomFunc" would instead be
    "cFunc".

*g:uctags_lang_map*        (Default: >
          \ {
          \   'c#'  : 'cSharp',
          \   'c++' : 'cpp'
          \ }
<)
    A |Dictionary| of {key}:{val} where {key} is {lang} i.e language supported
    by uctags, and {val} represents said {key} i.e {lang} but truncated for
    convenience; hence "c#" being mapped to "cSharp" as shown in the default. 

    Each {val} will be suffixed with {kind} (See |g:uctags_hl_group_map|)
    which is determined in the |tags| file (See |g:uctags_tags_file|) for the
    |tag| corresponding to the {lang} depicted by {key}, mapped to {val}.

    See |g:uctags_hl_group_map| for customizing the mapping of each {kind}.

    Generally {val} i.e {lang} should start with a lowercase.

    With the default shown above, and the defaults set in
    |g:uctags_hl_group_map|; for the language "c#" and {kind} "function",
    instead of the |group-name| being "c#function" for all functions in C#,
    the |group-name| would be "cSharpFunc" for all functions in C# because C#
    is mapped to "cSharp" and "function" is mapped to "Func",

    You can customize this as you please for each language supported by
    uctags.  See |g:uctags_hl_group_map| for a demonstration on how to.  The
    principle is the same.

*g:uctags_skip_kind_for*    (Default: {})
    When highlighting, for each {key} {kind}, every {val} {lang} i.e language,
    will be skipped and not highlighted.  This will not affect {kind} for
    other languages; only the languages that are present in the |List| {val}
    are affected.  Other "Kinds" for {lang} will not be affected.  Only the
    {key} {kind} is affected.

    The {val} must be a |List| that way if multiple languages are to have
    {kind} skipped when highlighting, you can have them all be specified in
    one place.

    Example:~  >
        let g:uctags_skip_kind_for['function'] = ['vim']
<

        Every "function" that is of the language "vim", will not be
        highlighted.  A |tag| will still be created for the corresponding
        function.
===============================================================================
2. FAQ                                                             *uctags-faq* 

How do I know when to use an equal size for entries for |g:uctags_extra_args|?

Running the following command in the terminal `ctags-universal --help` will
display all available parameters.  If a parameter contains an equal sign, you
need to use one in that particular key.  An example of a parameter that
doesn't require an equal sign is the -f parameter.  If you wanted to specify
-f as an extra argument, you would do so as follows:  >

    let g:uctags_extra_args['-f'] = 'myTags'
<
vim:si:et:sw=4:ts=4:sts=4:tw=78:ft=help:norl
